import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import uuid
import os

# Define a simple function to create draw.io XML components
def create_drawio_flowchart():
    def create_mxCell(id, value, style, vertex=True, parent="1", x=0, y=0, width=120, height=60):
        cell = ET.Element("mxCell", {
            "id": id,
            "value": value,
            "style": style,
            "vertex": "1" if vertex else "0",
            "parent": parent
        })
        geometry = ET.SubElement(cell, "mxGeometry", {
            "x": str(x),
            "y": str(y),
            "width": str(width),
            "height": str(height),
            "as": "geometry"
        })
        return cell

    def generate_id():
        return str(uuid.uuid4()).replace("-", "")

    # Draw.io XML structure
    mxfile = ET.Element("mxfile", {"host": "app.diagrams.net"})
    diagram = ET.SubElement(mxfile, "diagram", {"name": "Flowchart"})

    mxGraphModel = ET.SubElement(diagram, "mxGraphModel")
    root = ET.SubElement(mxGraphModel, "root")

    ET.SubElement(root, "mxCell", {"id": "0"})
    ET.SubElement(root, "mxCell", {"id": "1", "parent": "0"})

    # Define flowchart components
    y_pos = 0
    spacing = 100
    components = []

    def add_component(value, style, height=60):
        nonlocal y_pos
        comp_id = generate_id()
        cell = create_mxCell(comp_id, value, style, x=100, y=y_pos, height=height)
        root.append(cell)
        components.append(comp_id)
        y_pos += spacing
        return comp_id

    start_id = add_component("Start", "shape=terminator")
    api_req_id = add_component("API Request to fetch tickets", "shape=process")
    loop_id = add_component("Loop through each ticket", "shape=process")
    prev_tickets_id = add_component("Fetch previous tickets", "shape=process")
    notes_id = add_component("Close notes", "shape=process")
    attach_id = add_component("Attachments", "shape=process")
    tasks_id = add_component("Fetch tasks and release items", "shape=process")
    curr_attach_id = add_component("Fetch ticket attachments", "shape=process")
    end_id = add_component("End", "shape=terminator")

    # Add arrows (edges)
    for i in range(len(components) - 1):
        edge = ET.SubElement(root, "mxCell", {
            "id": generate_id(),
            "style": "edgeStyle=orthogonalEdgeStyle;rounded=0;",
            "edge": "1",
            "parent": "1",
            "source": components[i],
            "target": components[i+1]
        })
        ET.SubElement(edge, "mxGeometry", {"relative": "1", "as": "geometry"})

    # Return XML as string
    return ET.tostring(mxfile, encoding="unicode")

drawio_xml = create_drawio_flowchart()

# Save XML to file
xml_file_path = "/mnt/data/flowchart.drawio"
with open(xml_file_path, "w", encoding="utf-8") as f:
    f.write(drawio_xml)

# Generate PNG for quick view (simple visual preview, not full draw.io quality)
fig, ax = plt.subplots(figsize=(6, 10))
y = 10
steps = [
    "Start",
    "API Request to fetch tickets",
    "Loop through each ticket",
    "Fetch previous tickets",
    "Close notes",
    "Attachments",
    "Fetch tasks and release items",
    "Fetch ticket attachments",
    "End"
]
for step in steps:
    ax.add_patch(mpatches.FancyBboxPatch((1, y), 4, 1, boxstyle="round,pad=0.1", edgecolor='black', facecolor='lightgray'))
    ax.text(3, y+0.5, step, ha='center', va='center')
    y -= 1.5

ax.set_xlim(0, 6)
ax.set_ylim(-5, 12)
ax.axis('off')

png_file_path = "/mnt/data/flowchart_preview.png"
plt.savefig(png_file_path, bbox_inches='tight')
plt.close()

png_file_path, xml_file_path
