import requests
import pandas as pd
import arxiv
import random
import json
from google.generativeai.types import ChatGoogleGenerativeAI

# Configure Gemini API
chatbot = ChatGoogleGenerativeAI(model="gemini-pro", api_key="YOUR_GEMINI_API_KEY")


### -------------------- 1. Data Retrieval Agents -------------------- ###

def fetch_stock_data(stock_symbol):
    """Fetch live stock data (Simulated here)."""
    stock_data = {
        "Stock": stock_symbol,
        "Current Price": random.uniform(100, 300),
        "High": random.uniform(310, 350),
        "Low": random.uniform(90, 120),
        "Open": random.uniform(100, 320),
    }
    return stock_data

def fetch_research_papers(query):
    """Fetch latest research papers from Arxiv."""
    search = arxiv.Search(query=query, max_results=2, sort_by=arxiv.SortCriterion.SubmittedDate)
    papers = []
    for result in search.results():
        papers.append({"Title": result.title, "Abstract": result.summary})
    return papers


### -------------------- 2. Analysis Agents -------------------- ###

def analyze_stock(stock_data):
    """Use Gemini LLM to analyze stock data and generate a buy/sell recommendation."""
    prompt = f"""
    Analyze the following stock data and provide a **buy/sell recommendation**:
    - Stock: {stock_data["Stock"]}
    - Current Price: {stock_data["Current Price"]}
    - High: {stock_data["High"]}
    - Low: {stock_data["Low"]}
    - Open: {stock_data["Open"]}

    Provide a brief reasoning and recommendation.
    """
    response = chatbot.send_message(prompt)
    return response.text

def summarize_research(papers):
    """Use Gemini LLM to summarize research papers."""
    summaries = []
    for paper in papers:
        summary_prompt = f"Summarize the following research paper:\n\n{paper['Abstract']}"
        response = chatbot.send_message(summary_prompt)
        summaries.append({"Title": paper["Title"], "Summary": response.text})
    return summaries


### -------------------- 3. Decision and Logging Agents -------------------- ###

def store_research_log(summaries):
    """Save research summaries into a log file."""
    with open("research_log.txt", "w") as f:
        for paper in summaries:
            f.write(f"Title: {paper['Title']}\nSummary: {paper['Summary']}\n\n")
    return "Research log saved."


### -------------------- 4. Agent-Based Task Execution -------------------- ###

def execute_task(user_query):
    """Main AI Agent that dynamically selects and calls relevant sub-agents."""
    
    task_prompt = f"""
    The user has requested: "{user_query}"
    Determine which function should be called to fulfill this request. Respond in JSON format with:
    {{
        "task": "stock_analysis" or "research_summary",
        "parameters": {{"stock_symbol": "AAPL"}} OR {{"topic": "machine learning"}}
    }}
    """

    response = chatbot.send_message(task_prompt)
    
    try:
        task_data = json.loads(response.text)
    except json.JSONDecodeError:
        return "Error in task assignment. Please try again."

    if task_data["task"] == "stock_analysis":
        stock_data = fetch_stock_data(task_data["parameters"]["stock_symbol"])
        analysis_result = analyze_stock(stock_data)
        return analysis_result

    elif task_data["task"] == "research_summary":
        papers = fetch_research_papers(task_data["parameters"]["topic"])
        summaries = summarize_research(papers)
        log_status = store_research_log(summaries)
        return f"Summarized Research Papers:\n{summaries}\n\n{log_status}"

    else:
        return "Invalid task. Please rephrase your request."


### -------------------- 5. Example User Queries -------------------- ###

if __name__ == "__main__":
    # User asks for stock analysis
    user_input1 = "Should I invest in AAPL stocks?"
    result1 = execute_task(user_input1)
    print(result1)

    # User asks for research papers
    user_input2 = "Summarize the latest research on AI ethics."
    result2 = execute_task(user_input2)
    print(result2)
